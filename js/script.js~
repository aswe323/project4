/*
 * TODO:
 * 	basic functionality ( I/O to index.html ) !DONE!
 *
 * 	create turn object with:
 *		token switch X/O !DONE!
 *
 * 		turn cycle mathod !DONE!
 *
 *		make interface for squares:
 *			
 *			1.access !DONE!
 *			2.change class based on gameLogic.token !DONE!
 *			3.commiting move:
 *				3a. End Turn button? <--- !DONE!
 *				3b. one click and your done? <--- CANCELED
 *				!. event listeners !DONE!
 *			4.win conditions:
 *				4a. brute! !DONE!
 *
 *
 *
 *
 *
 *
 * 
 */



/*
 *                                                right now : 
 *                                                1.winnig screen  <--- now
 *                                                2.enter screen <--- later?
 *                                                3.computer opponent logic (scary) <--- 4 quears
 *                                                4.???
 *                                                5.profit!
 *
 */

class logic  {
	constructor(token, player2, player1) {

	document.querySelector(".boxes").addEventListener("click", (event) => {
		let clicked = event.target;
		this.move(clicked);
	}
		

	);



	
	//event listeners for mouse over and mouse out of the box.`

	document.querySelectorAll(".boxes .box").forEach((x,i) => x.addEventListener("mouseover", (event) =>{
		
		if (event.target.getAttribute("class") !== "box box-filled-1" && event.target.getAttribute("class") !== "box box-filled-2"){
		event.target.style.backgroundImage  = this.img;
			}
		}
	));
	
	document.querySelectorAll(".boxes .box").forEach((x,i) => x.addEventListener("mouseleave", (event) =>{
		event.target.style.backgroundImage = "";
		}
	));	


		//player localvariables
	this.player2 = document.querySelector("#player2"); // X
	this.player1 = document.querySelector("#player1"); // O
		
		//setting o to start

	this.player1.setAttribute("class","players active");

	this.rowOne = [document.querySelectorAll(".box")[0], document.querySelectorAll(".box")[1], document.querySelectorAll(".box")[2]];
	this.rowTwo = [document.querySelectorAll(".box")[3], document.querySelectorAll(".box")[4], document.querySelectorAll(".box")[5]];
	this.rowThree = [document.querySelectorAll(".box")[6], document.querySelectorAll(".box")[7], document.querySelectorAll(".box")[8]];
	this.token = "o";
	this.img = 'url(../project4/img/' + this.token + '.svg)';
		//wht?
	}

	//logic for the click event on the boxes

	move(box){
		if (box.getAttribute("class") === "box box-filled-1"  || box.getAttribute("class") === "box box-filled-2" ) {
			console.log("yep");
			return
		}else if(this.token === "o"){
			box.setAttribute("class", "box box-filled-1");
			box.setAttribute("claim",this.token);
			this.nextTurn();
		}else if(this.token === "x"){
			box.setAttribute("class", "box box-filled-2");
			box.setAttribute("claim",this.token);
			this.nextTurn();
		};
	}

	//simple switch function to change then active player element and token :)
	//not dry enough?
	nextTurn(){
		this.winner();
		if (this.token === "x"){
			this.token = "o";
			this.player1.setAttribute("class","players active");
			this.player2.setAttribute("class","players");
			

		}else{
			this.token = "x";
			this.player2.setAttribute("class","players active");
			this.player1.setAttribute("class","players");
		};
	this.img = 'url(../project4/img/' + this.token + '.svg)';
	};

	//win condition checker
	//not dry enough?	
	winner(){

		//complete row claimed
			//
		if (this.rowOne[0].getAttribute("claim") === this.token && this.rowOne[1].getAttribute("claim") === this.token && this.rowOne[2].getAttribute("claim") === this.token ){
			//PLACEHOLDER 
			return console.log("works!");
		}else if(this.rowTwo[0].getAttribute("claim") === this.token && this.rowTwo[1].getAttribute("claim") === this.token && this.rowTwo[2].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");
		}else if(this.rowThree[0].getAttribute("claim") === this.token && this.rowThree[1].getAttribute("claim") === this.token && this.rowThree[2].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");




		//comeplete horizonal.. row? claimed :)
			//
		}else if(this.rowOne[0].getAttribute("claim") === this.token && this.rowTwo[0].getAttribute("claim") === this.token && this.rowThree[0].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");
		}else if(this.rowOne[1].getAttribute("claim") === this.token && this.rowTwo[1].getAttribute("claim") === this.token && this.rowThree[1].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");
		}else if(this.rowOne[2].getAttribute("claim") === this.token && this.rowTwo[2].getAttribute("claim") === this.token && this.rowThree[2].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");



		//diagenel claims
			//
		}else if(this.rowOne[0].getAttribute("claim") === this.token && this.rowTwo[1].getAttribute("claim") === this.token && this.rowThree[2].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");
		}else if(this.rowOne[2].getAttribute("claim") === this.token && this.rowTwo[1].getAttribute("claim") === this.token && this.rowThree[0].getAttribute("claim") === this.token ){
			//PLACEHOLDER
			return console.log("works!");
		};

	//	this.rowOne.forEach((x,i)=> console.log(x.hasAttribute("claim")));   //works
	//	this.rowTwo.forEach((x,i)=> console.log(x.hasAttribute("claim")));   //works
	//	this.rowThree.forEach((x,i)=> console.log(x.hasAttribute("claim"))); //works
		
		//to change into somthing more DRY


		if(this.rowOne[1].hasAttribute("claim") && this.rowOne[0].hasAttribute("claim")&&this.rowOne[2].hasAttribute("claim")){
			if(this.rowTwo[1].hasAttribute("claim") && this.rowOne[0].hasAttribute("claim")&&this.rowThree[2].hasAttribute("claim")){
				if(this.rowOne[1].hasAttribute("claim") && this.rowTwo[0].hasAttribute("claim")&&this.rowThree[2].hasAttribute("claim")){
					//tie screen
				}}}
		
	/*
		if (this.rowOne.forEach((x,i)=> x.hasAttribute("claim"))&& this.rowTwo.forEach((x,i)=> x.hasAttribute("claim")) && this.rowThree.forEach((x,i)=> x.hasAttribute("claim"))){
			return console.log("tie! LOSERS!"); //DONST Work ??????? 
		};
*/


	};

	
}
//game welcome screen here

let gameLogic = new logic();

//game endings fork function here





